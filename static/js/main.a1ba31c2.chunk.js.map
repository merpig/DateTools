{"version":3,"sources":["components/PageHeader/PageHeader.js","components/Navbar/Navbar.js","components/Container/Container.js","components/CalendarCell/CalendarCell.js","components/Calendar/Calendar.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["PageHeader","props","useState","Date","toLocaleString","currentTime","setCurrentTime","useEffect","setInterval","className","Navbar","Container","children","CallendarCell","style","minWidth","maxWidth","height","backgroundColor","color","borderRadius","borderColor","onClick","day","months","base","monthRows","year","month","minDay","maxDay","getDate","firstDay","getDay","days","i","push","parsedDate","date","getFullYear","toString","getMonth","Calendar","setMonth","setYear","selected","setSelected","dayClick","width","map","App","console","log","margin","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.a1ba31c2.chunk.js","sourcesContent":["import {useEffect, useState} from 'react';\nimport \"./PageHeader.css\";\n\nconst PageHeader = props => {\n    const [currentTime,setCurrentTime] = useState(new Date().toLocaleString());\n\n    useEffect(()=>{\n        setInterval(() => {\n            setCurrentTime(new Date().toLocaleString());\n          }, 1000)\n    }, []);\n\n    return <div className=\"page-header\"><h1>{currentTime}</h1></div>;\n};\n  \nexport default PageHeader;","const Navbar = props => {\n    return <div></div>;\n};\n  \nexport default Navbar;","const Container = props => {\n    return <div className=\"container\">{props.children}</div>\n};\n  \nexport default Container;","import \"./CalendarCell.css\";\n\nconst CallendarCell = props => {\n    return (\n        <div \n            className=\"calendar-cell\" \n            style={{\n                minWidth:100*1/7+\"%\",\n                maxWidth:100*1/7+\"%\",\n                height:100/7+\"%\",\n                backgroundColor:props.color,\n                borderRadius:props.borderRadius,\n                borderColor:props.borderColor\n            }}\n            onClick={()=>props.onClick(props.day)}\n        >\n            {props.day}\n        </div>\n    );\n};\n  \nexport default CallendarCell;","import {useState} from 'react';\nimport CalendarCell from \"../CalendarCell/CalendarCell\";\nimport \"./Calendar.css\";\n\nconst months = [\n    \"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\",\n    \"August\", \"September\", \"October\", \"November\", \"December\"\n];\n\nconst base = [\"S\",\"M\",\"T\",\"W\",\"T\",\"F\",\"S\"];\n\nfunction monthRows(year,month){\n    let minDay = 1;\n    let maxDay = new Date(year, month+1, 0).getDate();\n    const firstDay = new Date(year, month, 1).getDay();\n\n    const days = [];\n\n    if(firstDay>0) minDay-=firstDay;\n    for(let i = minDay;i<=maxDay;i++){\n        const day = new Date(year, month, i).getDay();\n        days.push(new Date(year, month, i));\n        if(i===maxDay&&day<6) maxDay++;\n    }\n\n    return days;\n}\n\nfunction parsedDate(date){\n    return date.getFullYear().toString()+date.getMonth().toString()+date.getDate().toString();\n}\n\nconst Calendar = props => {\n    const [month,setMonth] = useState(new Date().getMonth());\n    const [year,setYear] = useState(new Date().getFullYear());\n    const [selected,setSelected] = useState(new Date());\n\n    const subtractMonth=()=>{\n        if(month>0) setMonth(month-1);\n        else {\n            setMonth(11);\n            setYear(year-1);\n        }\n    }\n\n    const addMonth=()=>{\n        if(month<11) setMonth(month+1);\n        else {\n            setMonth(0);\n            setYear(year+1);\n        }\n    }\n\n    const dayClick=day=>{\n        setSelected(new Date([year.toString(),(month+1).toString(),day]));\n        props\n            .setSelected(new Date([year.toString(),(month+1).toString(),day]));\n    }\n\n    return (\n        <div className=\"calendar-container\">\n            <div className=\"calendar-title-container\">\n                <div className=\"calendar-left-arrow calendar-arrow\" onClick={subtractMonth}>{\"<\"}</div>\n                <div className=\"calendar-title\" style={{width:\"100%\"}}>\n                    {months[month] + \", \" + year}\n                </div>\n                <div className=\"calendar-right-arrow calendar-arrow\" onClick={addMonth}>{\">\"}</div>\n            </div>\n            <div className=\"calendar-body\">\n                <div className=\"calendar-body-content\">\n                    {base.map((day,i)=>\n                        <CalendarCell \n                            key={i} \n                            day={day}\n                            color={\"rgb(230,230,230)\"}\n                            onClick={()=>{}}\n                            borderRadius={\"0%\"}\n                            borderColor={\"rgb(230,230,230)\"}\n                        />\n                    )}\n                    {monthRows(year,month).map((day,i)=>{\n                        return day.getMonth()!==month?\n                            <CalendarCell \n                                key={i}\n                                onClick={()=>{}}\n                            />:\n                            <CalendarCell \n                                key={i} \n                                day={day.getDate()} \n                                borderColor={parsedDate(day)===parsedDate(selected)?\"black\":\"\"}\n                                onClick={dayClick}\n                            />\n                    })}\n                </div>\n            </div>\n        </div>\n    );\n};\n  \nexport default Calendar;","import React, { useEffect, useState } from 'react';\nimport PageHeader from \"./components/PageHeader/PageHeader\";\nimport Navbar from \"./components/Navbar/Navbar\";\nimport Container from \"./components/Container/Container\";\nimport Calendar from \"./components/Calendar/Calendar\";\nimport './App.css';\n\nconst  App = () => {\n  \n  const [selected,setSelected] = useState(new Date());\n  useEffect(()=>{\n    console.log(\"Selected day changed to \"+selected);\n  },[selected]);\n\n  return (\n    <div className=\"App\">\n      <PageHeader/>\n      <Navbar />\n      <Container>\n        <div style={{width:\"300px\",height:\"300px\",margin:\"auto\"}}>\n          <Calendar setSelected={setSelected}/>\n        </div>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}