{"version":3,"sources":["components/PageHeader/PageHeader.js","components/Navbar/Navbar.js","components/Container/Container.js","components/CalendarCell/CalendarCell.js","components/Calendar/Calendar.js","components/DateHistoryTabs/DateHistoryTabs.js","components/DateHistoryEvents/DateHistoryEvents.js","components/DateHistory/DateHistory.js","utils.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["PageHeader","props","useState","Date","toLocaleString","currentTime","setCurrentTime","useEffect","setInterval","className","Navbar","Container","children","CallendarCell","day","onClick","selected","months","base","monthRows","year","month","minDay","maxDay","getDate","firstDay","getDay","days","i","push","parsedDate","date","getFullYear","toString","getMonth","Calendar","setSelected","setMonth","setYear","map","toLocaleDateString","monthPartial","toLowerCase","slice","stateObj","id","window","location","host","split","history","pushState","dayClick","TABS","DateHistoryTabs","active","tab","DateHistoryEvents","events","index","range","setRange","rangeList","length","filter","e","rangeOption","text","tabs","url","setTabData","a","axios","get","html","cheerio","load","data","parse","$","each","elem","trim","replace","console","log","prev","elemHeader","includes","child","c","title","attribs","join","DateHistory","activeTab","setActiveTab","activeTabComponent","setActiveTabComponent","setEvents","births","setBirths","deaths","setDeaths","holidays","setHolidays","scrapeSite","monthPartials","utils","parseUrlDate","max","validYear","validMonth","isNaN","parseInt","indexOf","dateFromUrl","hash","App","style","width","height","margin","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","status","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.bf6aef70.chunk.js","sourcesContent":["import {useEffect, useState} from 'react';\nimport \"./PageHeader.css\";\n\nconst PageHeader = props => {\n    const [currentTime,setCurrentTime] = useState(new Date().toLocaleString());\n\n    useEffect(()=>{\n        setInterval(() => {\n            setCurrentTime(new Date().toLocaleString());\n          }, 1000)\n    }, []);\n\n    return <div className=\"page-header\"><h1>{currentTime}</h1></div>;\n};\n  \nexport default PageHeader;","const Navbar = props => {\n    return <div></div>;\n};\n  \nexport default Navbar;","const Container = props => {\n    return <div className=\"container\">{props.children}</div>\n};\n  \nexport default Container;","import \"./CalendarCell.css\";\n\nconst CallendarCell = ({day,onClick,selected}) => {\n    return (\n        <div \n            className={`calendar-cell ${selected}`} \n            onClick={onClick}\n        >\n            {day}\n        </div>\n    );\n};\n  \nexport default CallendarCell;","import {useState} from 'react';\nimport CalendarCell from \"../CalendarCell/CalendarCell\";\nimport \"./Calendar.css\";\n\nconst months = [\n    \"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\",\n    \"August\", \"September\", \"October\", \"November\", \"December\"\n];\n\nconst base = [\"S\",\"M\",\"T\",\"W\",\"T\",\"F\",\"S\"];\n\nfunction monthRows(year,month){\n    let minDay = 1;\n    let maxDay = new Date(year, month+1, 0).getDate();\n    const firstDay = new Date(year, month, 1).getDay();\n\n    const days = [];\n\n    if(firstDay>0) minDay-=firstDay;\n    for(let i = minDay;i<=maxDay;i++){\n        const day = new Date(year, month, i).getDay();\n        days.push(new Date(year, month, i));\n        if(i===maxDay&&day<6) maxDay++;\n    }\n\n    return days;\n}\n\nfunction parsedDate(date){\n    return date.getFullYear().toString()+date.getMonth().toString()+date.getDate().toString();\n}\n\nconst Calendar = ({selected,setSelected}) => {\n    const [month,setMonth] = useState(selected.getMonth());\n    const [year,setYear] = useState(selected.getFullYear());\n\n    const subtractMonth=()=>{\n        if(month>0) setMonth(month-1);\n        else {\n            setMonth(11);\n            setYear(year-1);\n        }\n    }\n\n    const addMonth=()=>{\n        if(month<11) setMonth(month+1);\n        else {\n            setMonth(0);\n            setYear(year+1);\n        }\n    }\n\n    const dayClick=(year,month,day)=>{\n        if(selected.toLocaleDateString()===new Date([year.toString(),(month+1).toString(),day]).toLocaleDateString()) return;\n\n        let monthPartial = months[month].toLowerCase().slice(0,3);\n        let stateObj = { id: \"100\" };\n        \n        window.location.host.split(\":\")[0]===\"localhost\"|| window.location.host.split(\":\")[0]===\"DateTools\"?\n        window.history.pushState(stateObj, \n                    \"DateTools\", `/#/${year}/${monthPartial}/${day}`):\n        window.history.pushState(stateObj, \n            \"DateTools\", `/DateTools/#/${year}/${monthPartial}/${day}`)\n        \n        setSelected(new Date([year.toString(),(month+1).toString(),day]));\n    }\n\n    return (\n        <div className=\"calendar-container\">\n            <div className=\"calendar-title-container\">\n                <div className=\"calendar-left-arrow calendar-arrow\" onClick={subtractMonth}>{\"<\"}</div>\n                <div className=\"calendar-title\">\n                    {months[month] + \", \" + year}\n                </div>\n                <div className=\"calendar-right-arrow calendar-arrow\" onClick={addMonth}>{\">\"}</div>\n            </div>\n            <div className=\"calendar-body\">\n                <div className=\"calendar-body-content\">\n                    {base.map((day,i)=>\n                        <CalendarCell \n                            key={i} \n                            day={day}\n                            onClick={()=>{}}\n                            selected=\"header-cell\"\n                        />\n                    )}\n                    {monthRows(year,month).map((day,i)=>{\n                        return day.getMonth()!==month?\n                            <CalendarCell \n                                key={i}\n                                onClick={()=>{}}\n                                selected=\"\"\n                            />:\n                            <CalendarCell \n                                key={i} \n                                day={day.getDate()} \n                                onClick={()=>dayClick(day.getFullYear(),day.getMonth(),day.getDate())}\n                                selected={parsedDate(day)===parsedDate(selected)?\"active-cell\":\"\"}\n                            />\n                    })}\n                </div>\n            </div>\n        </div>\n    );\n};\n  \nexport default Calendar;","import \"./DateHistoryTabs.css\";\n\nconst TABS = [\"Events\",\"Births\",\"Deaths\",\"Holidays\"];\n\nconst DateHistoryTabs = ({active,onClick}) => {\n    return (\n        <div className=\"datehistory-tabs container\">\n            <div className=\"row\">\n                {TABS.map(tab=>\n                    <div \n                        key={tab}\n                        className={`col-3 ${active===tab?\"dh-active-tab\":\"dh-tab\"}`}\n                        onClick={()=>onClick(tab)}\n                    >\n                        {tab}\n                    </div>\n                )}\n            </div>\n        </div>  \n    );\n};\n  \nexport default DateHistoryTabs;","import {useState} from 'react';\nimport \"./DateHistoryEvents.css\";\n\n\n\nconst DateHistoryEvents = ({events}) => {\n    const [index,setIndex] = useState(0);\n    const [range,setRange] = useState(5);\n\n    const rangeList = [5,10,25];\n\n    if(events.length>rangeList[2]) rangeList.push(events.length);\n    return (\n        <div className=\"tab-list\">\n            <div className=\"sorting-options container\">\n                <div className=\"row\">\n                    <div className=\"col-6\">\n                        <div className=\"range-selectors\">\n                            {rangeList.filter(e=>e<=events.length).map(rangeOption =>\n                                <div \n                                    key={rangeOption}\n                                    className={rangeOption===range?\"range-selected\":\"range-selector\"}\n                                    onClick={()=>setRange(rangeOption)}\n                                >\n                                    {rangeOption>rangeList[2]?\"All\":rangeOption}\n                                </div>\n                            )}\n                        </div>\n                        <div className=\"tab-results-info\">\n                            {index+1}-{(index+range)<events.length?(index+range):events.length} of {events.length}\n                        </div>\n                        \n                    </div>\n                    <div className=\"dh-filters col-6\">\n                    </div>\n                </div>\n            </div>\n            <ul>\n                {events.filter((e,i)=>i>=index&&i<index+range).map((e,i)=><li key={i}>{e.text}</li>)}\n            </ul>\n        </div>\n    );\n};\n  \nexport default DateHistoryEvents;","import {useState,useEffect} from 'react';\nimport DateHistoryTabs from \"../DateHistoryTabs/DateHistoryTabs\";\nimport Events from \"../DateHistoryEvents/DateHistoryEvents\"\nimport axios from 'axios';\nimport cheerio from 'cheerio';\nimport \"./DateHistory.css\";\n\nconst months = [\n    \"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\",\n    \"August\", \"September\", \"October\", \"November\", \"December\"\n];\n\nconst tabs = [\n    \"Events\",\n    \"Births\",\n    \"Deaths\",\n    \"Holidays and observances\"\n]\n\nasync function scrapeSite(url,setTabData){\n    const html = await axios.get(url);\n    //console.log(html.data.parse.text);\n    const $ = await cheerio.load(html.data.parse.text);\n    let data = {};\n\n    $('h2').each((i, elem) => {\n        if (i > 0 && i <= 4) {\n            data[$(elem).text().trim().replace('[edit]','')]=[];\n        }\n    });\n\n    console.log(data);\n\n    $('ul').each((i, elem) => {\n        if(elem.prev&&elem.prev.prev){\n            const elemHeader = $(elem.prev.prev).text().trim().replace('[edit]','')\n            if (tabs.includes(elemHeader)) {\n                // console.log($(elem.prev.prev).text().trim())\n                // console.log(\"---------------------------------\");\n                $(elem).children().each((i, child) =>{\n                    // console.log(child.children)\n                    // console.log(\n                    //     child\n                    //         .children\n                    //         .filter(c=>[c.data,c.title])\n                    //         .map(e=>e.attribs?e.children[0].data:e.data)\n                    //         .join(\" \")\n                    //         .replace(/\\s+/g, \" \"));\n                    data[elemHeader].push({\n                        text:child\n                                .children\n                                .filter(c=>[c.data,c.title])\n                                .map(e=>e.attribs?e.children[0].data:e.data)\n                                .join(\" \")\n                                .replace(/\\s+/g, \" \")\n                    })\n                });\n            }\n        }\n    });\n\n    setTabData(data);\n}\n\nconst DateHistory = ({month,day,year}) => {\n    const [activeTab,setActiveTab] = useState(\"Events\");\n    const [activeTabComponent,setActiveTabComponent] = useState();\n    const [events,setEvents] = useState([]);\n    const [births,setBirths] = useState([]);\n    const [deaths,setDeaths] = useState([]);\n    const [holidays,setHolidays] = useState([]);\n\n    const setTabData=(data)=>{\n        setEvents(data[\"Events\"]);\n        setBirths(data[\"Births\"]);\n        setDeaths(data[\"Deaths\"]);\n        setHolidays(data[\"Holidays and observances\"]);\n    }\n\n\n\n    useEffect(()=>{\n        console.log(\"Component loaded\");\n        const url = 'https://en.wikipedia.org/w/api.php?origin=*&action=parse&page='+months[month-1]+'_'+day+'&prop=text&formatversion=2&format=json';\n        scrapeSite(url,setTabData);\n    },[day, month]);\n\n    useEffect(()=>{\n        if(!events.length) return;\n        console.log(activeTab);\n        switch(activeTab){\n            case 'Births':\n                setActiveTabComponent(<Events events={births}/>);\n                break;\n            case 'Deaths':\n                setActiveTabComponent(<Events events={deaths}/>);\n                break;\n            case 'Holidays':\n                setActiveTabComponent(<Events events={holidays}/>);\n                break;\n            case 'Events': \n                setActiveTabComponent(<Events events={events}/>);\n                break;\n            default:\n        }\n    },[events, activeTab, births, deaths, holidays]);\n\n    return (\n        <div className=\"datehistory-container\">\n            <div className=\"datehistory-title-container\">\n                <div className=\"datehistory-title\">\n                    On \n                    <div className=\"datehistory-title-date\">\n                        {months[month-1]} {day}\n                    </div>\n                    in history\n                </div>\n            </div>\n            <DateHistoryTabs active={activeTab} onClick={setActiveTab}/>\n            <div className=\"datehistory-body container\">\n                {activeTabComponent}\n            </div>\n        </div>\n    );\n};\n  \nexport default DateHistory;","const months = [\n    \"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\",\n    \"August\", \"September\", \"October\", \"November\", \"December\"\n  ];\n  \n  const monthPartials = {\n    \"jan\":\"January\",\n    \"feb\":\"February\",\n    \"mar\":\"March\",\n    \"apr\":\"April\",\n    \"may\": \"May\",\n    \"jun\": \"June\",\n    \"jul\": \"July\",\n    \"aug\": \"August\",\n    \"sep\": \"September\",\n    \"oct\": \"October\",\n    \"nov\": \"November\",\n    \"dec\": \"December\"\n  }\n  const utils = {\n    parseUrlDate: function([year,month,day]){\n        let validYear = \"\";\n        let validMonth = \"\";\n    \n        let min = 0;\n        let max;\n    \n        if(!isNaN(year)&&parseInt(year)>=0){\n            validYear+=parseInt(year);\n        }\n        else return new Date();\n    \n        if(monthPartials[month]){\n            validMonth+=(months.indexOf(monthPartials[month]));\n        }\n        else return new Date();\n    \n        max = new Date(validYear,(parseInt(validMonth)+1).toString(),0).getDate();\n    \n        if(parseInt(day)>min&&parseInt(day)<=max){\n            return new Date(validYear,validMonth,parseInt(day));\n        }\n    \n        return new Date();\n    },\n\n    dateFromUrl : function({hash}){\n        return utils.parseUrlDate(hash.split(\"/\").slice(-3));\n    }\n}\n\nexport default utils;","import React, { useEffect, useState } from 'react';\nimport PageHeader from \"./components/PageHeader/PageHeader\";\nimport Navbar from \"./components/Navbar/Navbar\";\nimport Container from \"./components/Container/Container\";\nimport Calendar from \"./components/Calendar/Calendar\";\nimport DateHistory from \"./components/DateHistory/DateHistory\";\nimport './App.css';\nimport utils from \"./utils\";\n\nconst  App = () => {\n  const [selected,setSelected] = useState(utils.dateFromUrl(window.location));\n\n  useEffect(()=>{\n    console.log(\"Selected day changed to \"+selected);\n  },[selected]);\n\n  return (\n    <div className=\"App\">\n      <PageHeader/>\n      <Navbar />\n      <Container>\n        <div style={{width:\"300px\",height:\"300px\",margin:\"auto\"}}>\n          <Calendar selected={selected} setSelected={setSelected}/>\n        </div>\n        <div style={{width:\"100%\"}}>\n          <DateHistory \n            selected={selected}\n            month={selected.getMonth()+1}\n            year={selected.getFullYear()}\n            day={selected.getDate()}\n          />\n        </div>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\n\nReactDOM.render(\n  <React.StrictMode>\n      <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}